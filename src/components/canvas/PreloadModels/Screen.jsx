/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useState } from 'react'
import { useGLTF, useVideoTexture } from '@react-three/drei'
import { extend } from '@react-three/fiber'
import { VideoTexture } from 'three'
import { useStore } from '@/Store'



export default function Model(props) {

  const [playVideo, setPlayVideo] = useState(false)
  const group = useRef()
  const dataModel = useGLTF('/models/screen.glb')
  const { nodes, materials } = dataModel
  const { addModel } = useStore(state => state.Actions)

  useEffect(() => {
    addModel({ dataModel, modelName: "Screen" })
  }, [dataModel, addModel])

  const onComplete = (e) => {
    console.log(e)
    setPlayVideo(false)
  }
  return (
    <group ref={group} {...props} dispose={null}>
      <mesh geometry={nodes.TopBar.geometry} material={nodes.TopBar.material} />
      <mesh geometry={nodes.BottomBar.geometry} material={nodes.BottomBar.material} />
      <mesh geometry={nodes.String.geometry} material={materials.PEEK} />
      <mesh geometry={nodes.Ring.geometry} material={nodes.Ring.material} />
      <mesh geometry={nodes.EndCapLeft.geometry} material={nodes.EndCapLeft.material} />
      <mesh geometry={nodes.EndCapRight.geometry} material={nodes.EndCapRight.material} />
      <mesh geometry={nodes.Screen.geometry} material={materials.Screen} rotation={[Math.PI / 2, -Math.PI, 0]} position={[0, 0.1, .25]} scale={[1, -16 / 9, 9 / 16]} onClick={() => {
        setPlayVideo(true)
      }}>
        {playVideo === true ? <AudioTexture onComplete={onComplete}></AudioTexture> : <meshPhysicalMaterial></meshPhysicalMaterial>}
      </mesh>

    </group>
  )
}
useGLTF.preload('/models/screen.glb')


function AudioTexture({ onComplete }) {

  const [video, setVideo] = useState(undefined)
  const [texture, setTexture] = useState(undefined)

  useEffect(() => {
    if (video === undefined) {
      const video = document.createElement('video')
      video.onprogress = (() => console.log("playing"))
      video.onended = ((e) => {

        onComplete(e)
      })
      video.src = '/videos/IPFabric.mp4'
      video.play()
      setVideo(video)
      setTexture(new VideoTexture(video))
    }
    return
  }, [video, setVideo, onComplete])







  return texture !== undefined ? <meshBasicMaterial map={texture} toneMapped={false} /> : <meshBasicMaterial color="blue" toneMapped={false} />
}




